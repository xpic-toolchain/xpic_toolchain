"""
Targets:

[default] - Compile and build libgcc.a
install   - Copy libs and public include files to install directory
check     - Build and execute test programs


Variables:

target=
  release: Optimized for size, no debugging information [default]
  debugrel: Basic optimizations, with debugging information
  debug: No optimizations, with debugging information

savetemps=
  0: All generated .bc .ll .s files are temp files [default]
  [else]: Save .bc .ll .s files in output directory
  
testdir=
  [relative-path]: test directory to execute (default "sources")
  
gdb_connection=
  usb: connect to the nxhxXX board via USB (OOCD + GDB-SWITCH + XPIC-GDB) [default] 
  com: connect to the nxhxXX board via UART (GDB-SERVER <-> XPIC-GDB)

netx=
  netx10: compile tests for netx10 and run tests on it [default]
  netx51: compile tests for netx51 and run tests on it    
"""

import sys
import os
import re
sys.path.append('./../../BuildScripts/scons')
sys.path.append('./../../BuildScripts/runtest')
import xpic
import xpic_test
from time import gmtime, strftime


# Match existing files against a pattern string
# pattern is a path relative to the location of the current SConstruct file
#         Unix shell style meta characters for matching are supported 
# Return a list of strings, each containing a relative path with a slash '/' as separator
def Files(pattern):
  # begin with scons version of glob with os specific separators
  os_specific_paths = Glob(pattern, strings=True)
  paths = []
  # replace all backslashes with slashes
  for path in os_specific_paths:
    paths.append(re.sub("\\\\", "/", path))
  return paths

# ----------------------------------------------------------------
# ----------------------  Project Settings -----------------------
# ----------------------------------------------------------------
# gdb connection interface 
in_gdb_connection = ARGUMENTS.get('gdb_connection', 'usb').lower()
# netx chip 
in_netx_chip = ARGUMENTS.get('netx', 'netx10').lower()


cflags_common = ['__XPIC__']
if in_netx_chip == 'netx51' or in_netx_chip == 'netx51_usb2jtag':
    # Linker description file
    ldfile = "ld_script_NX51/xpic_sdram.ld"
    # Header files
    common_includes = Files("includes/common_NX51")
    xpic.env_netx10['ASFLAGS'] += '-mmcu=xpic2'
    cflags_common += ['__NETX51']
else:
    # Linker description file
    ldfile = "ld_script_NX10/xpic_sdram.ld"
    # Header files
    common_includes = Files("includes/common_NX10")
    cflags_common += ['__NETX10']


xpic_test_outdir = 'output'

xpic_test_cdefines = cflags_common

save_temps = ARGUMENTS.get('savetemps', '0').lower()
if save_temps != '0':
  print "saving temporary files"
  xpic.env_netx10['CCFLAGS'] += "-save-temps=" + save_temps + " "
  xpic_test_outdir += "/temp"

 
testbuild = ARGUMENTS.get('test', 'debug').lower()
if testbuild == 'debug':
  xpic.env_netx10['CCFLAGS'] += '-g -gdwarf-2 -O0 '

in_gdb_connection = ARGUMENTS.get('gdb_connection', 'com').lower()

# ----------------------------------------------------------------
# ------------------------  Common  ------------------------------
# ----------------------------------------------------------------

if xpic.buildarg == 'debug':
  xpic_test_cdefines.extend(['DEBUG'])
  
if in_netx_chip == 'netx51' or in_netx_chip == 'netx51_usb2jtag':  
  xpic_test_sources_common = Files('sources/common_NX51/*.c')
  xpic_test_sources_common+= Files('sources/common_NX51/irq_xpic.S')
  xpic_test_sources_init   = Files('sources/common_NX51/init_xpic.s')
else:
  xpic_test_sources_common = Files('sources/common_NX10/*.c')
  xpic_test_sources_init   = Files('sources/common_NX10/init_xpic.s')  
    
xpic_test_prog_files_common = xpic.netx10_xpic_compile(xpic_test_sources_common,
                                                common_includes, 
                                                xpic_test_cdefines, 
                                                xpic_test_outdir)

xpic_test_lib_common = xpic.netx10_xpic_makelib(xpic_test_prog_files_common,
                                    xpic_test_outdir,
                                    "common",
                                    xpic_test_outdir)


xpic_test_init = xpic.netx10_xpic_compile(xpic_test_sources_init,
                                          common_includes, 
                                          xpic_test_cdefines, 
                                          xpic_test_outdir)

# ----------------------------------------------------------------
# ------------------------  Tests  -------------------------------
# ----------------------------------------------------------------

def gcc_test(test_c_file):  
  xpic_test_artifact = re.sub(".*/([^/]+)\\.c$", "\\1", test_c_file, 1)
  xpic_test_sources = [test_c_file]
  
  xpic_test_prog_files = xpic.netx10_xpic_compile(xpic_test_sources,
                                                  common_includes, 
                                                  xpic_test_cdefines, 
                                                  xpic_test_outdir)
  
  xpic_test_xpic_elf = xpic.netx10_xpic_makeelf(xpic_test_prog_files + xpic_test_init,
                                                xpic_test_outdir,
                                                xpic_test_artifact, 
                                                [xpic_test_outdir], 
                                                ["common"], 
                                                ldfile)
  
  return xpic_test_xpic_elf


xpic_testf = []

test_dir = ARGUMENTS.get('testdir', 'sources')

xpic_testf_list = Files(test_dir + '/*.c')
#xpic_testf_list = Files(test_dir + '/*packed_structures*.c')


for src in xpic_testf_list:
  xpic_testf.append(gcc_test(src))

testreport = xpic_test.xpic_runtest(strftime("%Y-%m-%d_%H-%M-%S_test", gmtime()), xpic_testf, gdb_connection=in_gdb_connection, netx=in_netx_chip)
Alias('check',testreport)

                                      

# ----------------------------------------------------------
# ------------------- LINKER-TESTS -------------------------
# ----------------------------------------------------------


def link_test(test_c_files, dir, test_ld_file):  
  xpic_test_artifact = re.sub(".*/([^/]+)/.*\\.ld$", "\\1", test_ld_file, 1)
  
  xpic_test_prog_files = xpic.netx10_xpic_compile(test_c_files,
                                                  common_includes, 
                                                  xpic_test_cdefines, 
                                                  xpic_test_outdir)
  
  xpic_test_xpic_elf = xpic.netx10_xpic_makeelf(xpic_test_prog_files,
                                                xpic_test_outdir,
                                                xpic_test_artifact, 
                                                [], 
                                                [], 
                                                test_ld_file)
  
  return xpic_test_xpic_elf

linktests = xpic_test_sources_common = Files('sources/link/**/*.ld')
for linktest in linktests:
  dir,script = os.path.split(linktest)
  linktest_c_files = Files(dir+"/*.[cs]")
  #xpic_testf.append(link_test(linktest_c_files, dir, linktest))
  
Default(xpic_testf)
